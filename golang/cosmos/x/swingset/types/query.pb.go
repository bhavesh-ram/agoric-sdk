// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/swingset/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryEgressRequest is the request type for the Query/Egress RPC method
type QueryEgressRequest struct {
	Peer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=peer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"peer" yaml:"peer"`
}

func (m *QueryEgressRequest) Reset()         { *m = QueryEgressRequest{} }
func (m *QueryEgressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryEgressRequest) ProtoMessage()    {}
func (*QueryEgressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{2}
}
func (m *QueryEgressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEgressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEgressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEgressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEgressRequest.Merge(m, src)
}
func (m *QueryEgressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryEgressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEgressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEgressRequest proto.InternalMessageInfo

func (m *QueryEgressRequest) GetPeer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Peer
	}
	return nil
}

// QueryEgressResponse is the egress response.
type QueryEgressResponse struct {
	Egress *Egress `protobuf:"bytes,1,opt,name=egress,proto3" json:"egress,omitempty"`
}

func (m *QueryEgressResponse) Reset()         { *m = QueryEgressResponse{} }
func (m *QueryEgressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryEgressResponse) ProtoMessage()    {}
func (*QueryEgressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{3}
}
func (m *QueryEgressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryEgressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryEgressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryEgressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryEgressResponse.Merge(m, src)
}
func (m *QueryEgressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryEgressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryEgressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryEgressResponse proto.InternalMessageInfo

func (m *QueryEgressResponse) GetEgress() *Egress {
	if m != nil {
		return m.Egress
	}
	return nil
}

// QueryMailboxRequest is the mailbox query.
type QueryMailboxRequest struct {
	Peer github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=peer,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"peer" yaml:"peer"`
}

func (m *QueryMailboxRequest) Reset()         { *m = QueryMailboxRequest{} }
func (m *QueryMailboxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxRequest) ProtoMessage()    {}
func (*QueryMailboxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{4}
}
func (m *QueryMailboxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxRequest.Merge(m, src)
}
func (m *QueryMailboxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxRequest proto.InternalMessageInfo

func (m *QueryMailboxRequest) GetPeer() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Peer
	}
	return nil
}

// QueryMailboxResponse is the mailbox response.
type QueryMailboxResponse struct {
	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value" yaml:"value"`
}

func (m *QueryMailboxResponse) Reset()         { *m = QueryMailboxResponse{} }
func (m *QueryMailboxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMailboxResponse) ProtoMessage()    {}
func (*QueryMailboxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{5}
}
func (m *QueryMailboxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMailboxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMailboxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMailboxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMailboxResponse.Merge(m, src)
}
func (m *QueryMailboxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMailboxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMailboxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMailboxResponse proto.InternalMessageInfo

func (m *QueryMailboxResponse) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// QueryPendingInstallRequest is the request type for the Query/PendingInstall RPC method.
type QueryPendingInstallRequest struct {
	PendingId uint64 `protobuf:"varint,1,opt,name=pending_id,json=pendingId,proto3" json:"pending_id" yaml:"pending_id"`
}

func (m *QueryPendingInstallRequest) Reset()         { *m = QueryPendingInstallRequest{} }
func (m *QueryPendingInstallRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingInstallRequest) ProtoMessage()    {}
func (*QueryPendingInstallRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{6}
}
func (m *QueryPendingInstallRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingInstallRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingInstallRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingInstallRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingInstallRequest.Merge(m, src)
}
func (m *QueryPendingInstallRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingInstallRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingInstallRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingInstallRequest proto.InternalMessageInfo

func (m *QueryPendingInstallRequest) GetPendingId() uint64 {
	if m != nil {
		return m.PendingId
	}
	return 0
}

// QueryPendingInstalllResponse is the response type for the Query/PendingInstall RPC method.
type QueryPendingInstallResponse struct {
	PendingId    uint64        `protobuf:"varint,1,opt,name=pending_id,json=pendingId,proto3" json:"pending_id" yaml:"pending_id"`
	BundleChunks *BundleChunks `protobuf:"bytes,2,opt,name=bundle_chunks,json=bundleChunks,proto3" json:"bundle_chunks" yaml:"bundle_chunks"`
	StartTime    int64         `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time" yaml:"start_time"`
	StartBlock   int64         `protobuf:"varint,4,opt,name=start_block,json=startBlock,proto3" json:"start_block" yaml:"start_block"`
}

func (m *QueryPendingInstallResponse) Reset()         { *m = QueryPendingInstallResponse{} }
func (m *QueryPendingInstallResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingInstallResponse) ProtoMessage()    {}
func (*QueryPendingInstallResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_76266f656a1a9971, []int{7}
}
func (m *QueryPendingInstallResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingInstallResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingInstallResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingInstallResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingInstallResponse.Merge(m, src)
}
func (m *QueryPendingInstallResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingInstallResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingInstallResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingInstallResponse proto.InternalMessageInfo

func (m *QueryPendingInstallResponse) GetPendingId() uint64 {
	if m != nil {
		return m.PendingId
	}
	return 0
}

func (m *QueryPendingInstallResponse) GetBundleChunks() *BundleChunks {
	if m != nil {
		return m.BundleChunks
	}
	return nil
}

func (m *QueryPendingInstallResponse) GetStartTime() int64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *QueryPendingInstallResponse) GetStartBlock() int64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "agoric.swingset.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "agoric.swingset.QueryParamsResponse")
	proto.RegisterType((*QueryEgressRequest)(nil), "agoric.swingset.QueryEgressRequest")
	proto.RegisterType((*QueryEgressResponse)(nil), "agoric.swingset.QueryEgressResponse")
	proto.RegisterType((*QueryMailboxRequest)(nil), "agoric.swingset.QueryMailboxRequest")
	proto.RegisterType((*QueryMailboxResponse)(nil), "agoric.swingset.QueryMailboxResponse")
	proto.RegisterType((*QueryPendingInstallRequest)(nil), "agoric.swingset.QueryPendingInstallRequest")
	proto.RegisterType((*QueryPendingInstallResponse)(nil), "agoric.swingset.QueryPendingInstallResponse")
}

func init() { proto.RegisterFile("agoric/swingset/query.proto", fileDescriptor_76266f656a1a9971) }

var fileDescriptor_76266f656a1a9971 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x41, 0x6b, 0xd4, 0x4e,
	0x1c, 0xdd, 0xb4, 0xdb, 0xfd, 0xd3, 0x69, 0xff, 0x8a, 0xe3, 0x42, 0xb7, 0x5b, 0xcd, 0xd4, 0xa9,
	0xd5, 0x8a, 0x6d, 0x02, 0x55, 0x2f, 0x7a, 0x6a, 0xc4, 0x6a, 0x41, 0x41, 0x83, 0x5e, 0x44, 0xa8,
	0xd9, 0x64, 0x48, 0x43, 0x93, 0x4c, 0x9a, 0xc9, 0x6a, 0x4b, 0x29, 0x82, 0x9f, 0x40, 0xf0, 0x03,
	0x88, 0xdf, 0xa6, 0xc7, 0x82, 0x17, 0x0f, 0x32, 0x48, 0xeb, 0x69, 0x8f, 0x7b, 0xf4, 0x24, 0x99,
	0x99, 0xb8, 0x9b, 0xdd, 0xae, 0x7a, 0x10, 0x4f, 0x9b, 0x79, 0xbf, 0xdf, 0xbc, 0xf7, 0x7e, 0x99,
	0xbc, 0x59, 0x30, 0xe7, 0xf8, 0x34, 0x0d, 0x5c, 0x93, 0xbd, 0x0e, 0x62, 0x9f, 0x91, 0xcc, 0xdc,
	0x69, 0x93, 0x74, 0xcf, 0x48, 0x52, 0x9a, 0x51, 0x78, 0x56, 0x16, 0x8d, 0xa2, 0xd8, 0xac, 0xfb,
	0xd4, 0xa7, 0xa2, 0x66, 0xe6, 0x4f, 0xb2, 0xad, 0xa9, 0x0f, 0x72, 0x14, 0x0f, 0xaa, 0x7e, 0xc1,
	0xa7, 0xd4, 0x0f, 0x89, 0xe9, 0x24, 0x81, 0xe9, 0xc4, 0x31, 0xcd, 0x9c, 0x2c, 0xa0, 0x31, 0x93,
	0x55, 0x5c, 0x07, 0xf0, 0x49, 0xae, 0xf9, 0xd8, 0x49, 0x9d, 0x88, 0xd9, 0x64, 0xa7, 0x4d, 0x58,
	0x86, 0x1f, 0x82, 0xf3, 0x25, 0x94, 0x25, 0x34, 0x66, 0x04, 0xde, 0x02, 0xb5, 0x44, 0x20, 0x0d,
	0x6d, 0x5e, 0x5b, 0x9a, 0x5a, 0x9d, 0x31, 0x06, 0x2c, 0x1a, 0x72, 0x83, 0x55, 0x3d, 0xe4, 0xa8,
	0x62, 0xab, 0x66, 0x9c, 0x2a, 0x8d, 0x7b, 0x7e, 0x4a, 0x58, 0xa1, 0x01, 0x5f, 0x80, 0x6a, 0x42,
	0x48, 0x2a, 0xa8, 0xa6, 0xad, 0x07, 0x1d, 0x8e, 0xc4, 0xba, 0xcb, 0xd1, 0xd4, 0x9e, 0x13, 0x85,
	0xb7, 0x71, 0xbe, 0xc2, 0xdf, 0x39, 0x5a, 0xf1, 0x83, 0x6c, 0xab, 0xdd, 0x32, 0x5c, 0x1a, 0x99,
	0x2e, 0x65, 0x11, 0x65, 0xea, 0x67, 0x85, 0x79, 0xdb, 0x66, 0xb6, 0x97, 0x10, 0x66, 0xac, 0xb9,
	0xee, 0x9a, 0xe7, 0x09, 0x7a, 0xc1, 0x82, 0xd7, 0xd5, 0x04, 0x85, 0xa6, 0x9a, 0xc0, 0x04, 0x35,
	0x22, 0x90, 0x91, 0x13, 0xa8, 0x0d, 0xaa, 0x0d, 0x33, 0xc5, 0xf3, 0xc8, 0x09, 0xc2, 0x16, 0xdd,
	0xfd, 0x37, 0xe6, 0xef, 0x83, 0x7a, 0x59, 0xf4, 0xa7, 0xfb, 0x89, 0x57, 0x4e, 0xd8, 0x26, 0x42,
	0x76, 0xd2, 0x9a, 0xed, 0x70, 0x24, 0x81, 0x2e, 0x47, 0xd3, 0x52, 0x57, 0x2c, 0xb1, 0x2d, 0x61,
	0xfc, 0x12, 0x34, 0xe5, 0x39, 0x92, 0xd8, 0x0b, 0x62, 0x7f, 0x23, 0x66, 0x99, 0x13, 0x86, 0xc5,
	0x10, 0x16, 0x00, 0x89, 0x2c, 0x6c, 0x06, 0x9e, 0xe0, 0xac, 0x5a, 0x0b, 0x1d, 0x8e, 0xfa, 0xd0,
	0x2e, 0x47, 0xe7, 0x8a, 0x81, 0x0a, 0x0c, 0xdb, 0x93, 0x6a, 0xb1, 0xe1, 0xe1, 0x2f, 0x63, 0x60,
	0xee, 0x54, 0x09, 0x65, 0xf9, 0x2f, 0x68, 0xc0, 0x08, 0xfc, 0xdf, 0x6a, 0xc7, 0x5e, 0x48, 0x36,
	0xdd, 0xad, 0x76, 0xbc, 0xcd, 0x1a, 0x63, 0xe2, 0xec, 0x2e, 0x0e, 0x9d, 0x9d, 0x25, 0xba, 0xee,
	0x8a, 0x26, 0xeb, 0x5a, 0x87, 0xa3, 0xf2, 0xbe, 0x2e, 0x47, 0x75, 0x29, 0x54, 0x82, 0xb1, 0x3d,
	0xdd, 0xea, 0xdb, 0x98, 0x5b, 0x66, 0x99, 0x93, 0x66, 0x9b, 0x59, 0x10, 0x91, 0xc6, 0xf8, 0xbc,
	0xb6, 0x34, 0x2e, 0x2d, 0xf7, 0xd0, 0x9e, 0xe5, 0x1e, 0x86, 0xed, 0x49, 0xb1, 0x78, 0x1a, 0x44,
	0x04, 0xae, 0x83, 0x29, 0x59, 0x69, 0x85, 0xd4, 0xdd, 0x6e, 0x54, 0x05, 0xc9, 0x62, 0x87, 0xa3,
	0x7e, 0xb8, 0xcb, 0x11, 0xec, 0x67, 0x11, 0x20, 0xb6, 0xa5, 0x8e, 0x95, 0x2f, 0x56, 0x3f, 0x54,
	0xc1, 0x84, 0x78, 0xbd, 0x30, 0x03, 0x35, 0x19, 0x2e, 0xb8, 0x30, 0x34, 0xf7, 0x70, 0x82, 0x9b,
	0x97, 0x7f, 0xdd, 0x24, 0x4f, 0x07, 0xa3, 0xb7, 0x9f, 0xbe, 0xbd, 0x1f, 0x9b, 0x85, 0x33, 0xe6,
	0xe0, 0x25, 0x22, 0xa3, 0x0b, 0xf7, 0x41, 0x4d, 0x06, 0x62, 0x94, 0x6a, 0x29, 0xd3, 0xa3, 0x54,
	0xcb, 0x21, 0xc4, 0x57, 0x84, 0xea, 0x3c, 0xd4, 0x87, 0x54, 0x65, 0xe8, 0xcc, 0xfd, 0x3c, 0x05,
	0x07, 0xf0, 0x0d, 0xf8, 0x4f, 0x25, 0x00, 0x8e, 0x20, 0x2e, 0xa7, 0xb2, 0xb9, 0xf8, 0x9b, 0x2e,
	0xa5, 0x7f, 0x55, 0xe8, 0x5f, 0x82, 0x68, 0x48, 0x3f, 0x92, 0x9d, 0x85, 0x81, 0x8f, 0x1a, 0x38,
	0x53, 0xfe, 0xae, 0xe1, 0xf5, 0x11, 0xef, 0xf5, 0xb4, 0x80, 0x35, 0x97, 0xff, 0xac, 0x59, 0xd9,
	0xba, 0x29, 0x6c, 0x19, 0x70, 0x79, 0xc8, 0x96, 0xfc, 0x3c, 0x4d, 0x95, 0x88, 0xdc, 0x5d, 0x91,
	0x93, 0x03, 0xeb, 0xd9, 0xe1, 0xb1, 0xae, 0x1d, 0x1d, 0xeb, 0xda, 0xd7, 0x63, 0x5d, 0x7b, 0x77,
	0xa2, 0x57, 0x8e, 0x4e, 0xf4, 0xca, 0xe7, 0x13, 0xbd, 0xf2, 0xfc, 0x4e, 0xdf, 0xd5, 0xb3, 0x26,
	0x19, 0x25, 0xb1, 0xb8, 0x7a, 0x7c, 0x1a, 0x3a, 0xb1, 0x5f, 0xdc, 0x49, 0xbb, 0x3d, 0x31, 0x71,
	0x27, 0xb5, 0x6a, 0xe2, 0xef, 0xe1, 0xc6, 0x8f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xcc, 0x51,
	0xc5, 0xa2, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries params of the swingset module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Egress queries a provisioned egress.
	Egress(ctx context.Context, in *QueryEgressRequest, opts ...grpc.CallOption) (*QueryEgressResponse, error)
	// Return the contents of a peer's outbound mailbox.
	Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error)
	// Return the state of a pending installation.
	PendingInstall(ctx context.Context, in *QueryPendingInstallRequest, opts ...grpc.CallOption) (*QueryPendingInstallResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Egress(ctx context.Context, in *QueryEgressRequest, opts ...grpc.CallOption) (*QueryEgressResponse, error) {
	out := new(QueryEgressResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Query/Egress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Mailbox(ctx context.Context, in *QueryMailboxRequest, opts ...grpc.CallOption) (*QueryMailboxResponse, error) {
	out := new(QueryMailboxResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Query/Mailbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingInstall(ctx context.Context, in *QueryPendingInstallRequest, opts ...grpc.CallOption) (*QueryPendingInstallResponse, error) {
	out := new(QueryPendingInstallResponse)
	err := c.cc.Invoke(ctx, "/agoric.swingset.Query/PendingInstall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries params of the swingset module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Egress queries a provisioned egress.
	Egress(context.Context, *QueryEgressRequest) (*QueryEgressResponse, error)
	// Return the contents of a peer's outbound mailbox.
	Mailbox(context.Context, *QueryMailboxRequest) (*QueryMailboxResponse, error)
	// Return the state of a pending installation.
	PendingInstall(context.Context, *QueryPendingInstallRequest) (*QueryPendingInstallResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Egress(ctx context.Context, req *QueryEgressRequest) (*QueryEgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Egress not implemented")
}
func (*UnimplementedQueryServer) Mailbox(ctx context.Context, req *QueryMailboxRequest) (*QueryMailboxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mailbox not implemented")
}
func (*UnimplementedQueryServer) PendingInstall(ctx context.Context, req *QueryPendingInstallRequest) (*QueryPendingInstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingInstall not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Egress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryEgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Egress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Query/Egress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Egress(ctx, req.(*QueryEgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Mailbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMailboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Mailbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Query/Mailbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Mailbox(ctx, req.(*QueryMailboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingInstall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingInstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingInstall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/agoric.swingset.Query/PendingInstall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingInstall(ctx, req.(*QueryPendingInstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "agoric.swingset.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Egress",
			Handler:    _Query_Egress_Handler,
		},
		{
			MethodName: "Mailbox",
			Handler:    _Query_Mailbox_Handler,
		},
		{
			MethodName: "PendingInstall",
			Handler:    _Query_PendingInstall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "agoric/swingset/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryEgressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEgressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEgressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryEgressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryEgressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryEgressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Egress != nil {
		{
			size, err := m.Egress.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Peer) > 0 {
		i -= len(m.Peer)
		copy(dAtA[i:], m.Peer)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Peer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryMailboxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMailboxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMailboxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingInstallRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingInstallRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingInstallRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PendingId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingInstallResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingInstallResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingInstallResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.StartBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.StartTime != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartTime))
		i--
		dAtA[i] = 0x18
	}
	if m.BundleChunks != nil {
		{
			size, err := m.BundleChunks.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PendingId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PendingId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryEgressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryEgressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Egress != nil {
		l = m.Egress.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMailboxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Peer)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryMailboxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingInstallRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PendingId != 0 {
		n += 1 + sovQuery(uint64(m.PendingId))
	}
	return n
}

func (m *QueryPendingInstallResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PendingId != 0 {
		n += 1 + sovQuery(uint64(m.PendingId))
	}
	if m.BundleChunks != nil {
		l = m.BundleChunks.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartTime != 0 {
		n += 1 + sovQuery(uint64(m.StartTime))
	}
	if m.StartBlock != 0 {
		n += 1 + sovQuery(uint64(m.StartBlock))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEgressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEgressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEgressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryEgressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryEgressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryEgressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Egress", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Egress == nil {
				m.Egress = &Egress{}
			}
			if err := m.Egress.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Peer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Peer = append(m.Peer[:0], dAtA[iNdEx:postIndex]...)
			if m.Peer == nil {
				m.Peer = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMailboxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMailboxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMailboxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingInstallRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingInstallRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingInstallRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingId", wireType)
			}
			m.PendingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingInstallResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingInstallResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingInstallResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingId", wireType)
			}
			m.PendingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PendingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BundleChunks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BundleChunks == nil {
				m.BundleChunks = &BundleChunks{}
			}
			if err := m.BundleChunks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			m.StartTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
